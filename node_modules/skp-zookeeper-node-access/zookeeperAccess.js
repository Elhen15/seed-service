const zookeeper = require('node-zookeeper-client')
const zookeeperServer = process.env.zookeeperServer || "skp-int-zook-3"

async function getNodeData(path, watcher){
    return new Promise(function (resolve, reject){
        const client = zookeeper.createClient(zookeeperServer,{ retries : 3 })
        client.connect()
        client.getData(path, watcher, function (error, data, stat) {
            if (error) {
                client.close()
                reject(error)
            }
            else {
                if (watcher == undefined){
                    client.close()
                }
                resolve(data ? data.toString() : undefined)
            }
        })
    })
}
async function getChildren(path, watcher){
    return new Promise(function (resolve, reject){
        const client = zookeeper.createClient(zookeeperServer,{ retries : 3 })
        client.connect()
        client.getChildren(path, watcher, function (error, children) {
        if (error) {
            client.close()
            reject(error)
        }
        else {
            if (watcher == undefined){
                client.close()
        }
            resolve(children)
        }})
    })
};
async function createNode(path){
    return new Promise(function (resolve, reject){
        let client = zookeeper.createClient(zookeeperServer,{ retries : 3 })
        let parentNode = getParentNode(path)
        client.connect()
        client.exists(parentNode, async (error, stat) => {
            if (error) {
                client.close()
                reject(error)
            }
            if (stat == undefined) {
                    await createNode(parentNode)
            }
            client.create(path, function (error) {
                if (error) {
                    client.close()
                    reject(error)
                }
                else {
                    client.close()
                    resolve(0)
                }})
            })
        })
    }
function getParentNode(path){
    return path.substring(0, path.lastIndexOf("/"))
}
async function deleteNode(path){
    return new Promise(function (resolve, reject){
        const client = zookeeper.createClient(zookeeperServer,{ retries : 3 })
        client.connect()
        client.remove(path, function (error) {
        if (error) {
            client.close()
            reject(error)
        }
        else {
            client.close()
            resolve (0)
        }})
    })
}
async function setNodeData(path, data){
    return new Promise(function (resolve, reject){
        const client = zookeeper.createClient(zookeeperServer,{ retries : 3 })
        client.connect()
        client.setData(path, new Buffer(data), function (error, stat) {
        if (error) {
            client.close()
            reject(error)
        }
        else {
            client.close()
            resolve(0)
        }})
    })
};
module.exports = {getNodeData
                 ,getChildren
                 ,setNodeData
                 ,createNode
                 ,deleteNode}
const Ajv = require('ajv');

const ajv = new Ajv();
const skypathLogSchema = require('../resources/objects/SkypathLog.schema.json');

// Validating the message against skypathLogSchema with special option - the user can decied which fields will be require in the skypathLogSchema against his LogObject.
// By enabling this option, the validating becomes generic enough so each partial LogObject can be recived and properly be validate as opposed to only reciving a full log message as a LogObject.
// requireFields argumant will be injected the dynamic required definition for the dynamicSchema.
// if the user want to use the default required defintiion, requireFields should be undefined. if the want to inject an empty required defintiion, requireFields should be [] .
function validateLoggingMessage(LogObject, requireFields) {
	const dynamicSchema = skypathLogSchema;
	if (requireFields) { dynamicSchema.required = requireFields; }

	const validate = ajv.compile(dynamicSchema);
	const validation = { isValid: validate(LogObject), errorDetails: validate.errors };

	ajv.removeSchema(dynamicSchema.$id); // removing the schema in order to avoid schema key duplications inside ajv.

	if (!validation.isValid) { throw new Error(JSON.stringify({ ValidationError: validation.errorDetails })); }
}

module.exports = {
	validateLoggingMessage,
	skypathLogSchema,
};

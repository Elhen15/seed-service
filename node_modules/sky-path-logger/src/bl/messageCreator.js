const os = require('os');
const messageValidator = require('./messageValidator.js');
const skyPathUtilities = require('../resources/utilities/sky-path-utilities.js');
const defaultServiceInformation = require('../resources/objects/DefaultServiceInformation.json');
const defaultInstanceInformation = require('../resources/objects/DefaultInstanceInformation.json');

let serviceInformation = {};
let instanceInformation = {};

/**
 * @description Initializing the service's constant information for each message that will logged afterwords while validating the recived ServiceInformation.
 * There are certian fields that doesn't need to be configured more then once, because they are constant to the service level (as opposed to other fields that need to be configured for each message or for each log).
 * Those fields are called the ServiceInformation.
 * @argument {JSON} objectServiceInformation An object that contains the fields that were mentioned above. To insert the object in the right form, it is recommended to use defaultServiceInformation - an available object in the same form.
 */
function initializeServiceInformation(objectServiceInformation) {
	messageValidator.validateLoggingMessage(objectServiceInformation, ['microserviceData']);
	serviceInformation = objectServiceInformation;
}

/**
 * @description Initializing the instance information for each message that will logged afterwords.
 * There are certian fields that doesn't need to be configured more then once, because they are constant to the message level (as opposed to other fields that needs to be configured for each log).
 * Those fields are called the InstanceInformation.
 * Calling this initializer function is vital for every message the enters the service (for every instance).
 * You may choose not to insert the argument of the function, but you must call it for every new instance.
 * @argument {JSON} objectInstanceInformation Not required argumant. An object that contains the fields that were mentioned above. To insert the object in the right form, it is recommended to use defaultInstanceInformation - an available object in the same form.
 */
function initializeInstanceInformation(objectInstanceInformation) {
	if (objectInstanceInformation) {
		messageValidator.validateLoggingMessage(objectInstanceInformation, []);
		instanceInformation = objectInstanceInformation;
	} else {
		instanceInformation = {};
	}
}

function createLoggingMessage(logLevel, logString, item, labels) {
	const logArgumants = { logLevel, logString, item, labels };
	messageValidator.validateLoggingMessage(logArgumants, ['logLevel', 'logString']);

	const fullLogMessage = {};

	// Default Fields
	fullLogMessage.schemaName = messageValidator.skypathLogSchema.properties.schemaName.default;
	fullLogMessage.schemaVersion = messageValidator.skypathLogSchema.properties.schemaVersion.default;
	// Requierd Fields
	fullLogMessage.timestamp = skyPathUtilities.dateMoment().format();
	fullLogMessage.logRecordId = skyPathUtilities.generateUUIDV4();
	fullLogMessage.logLevel = logLevel;
	fullLogMessage.microserviceData = serviceInformation.microserviceData;
	fullLogMessage.microserviceData.podId = os.hostname();
	fullLogMessage.logString = logString;
	// Unrequierd Fields
	if (instanceInformation.itemIds) { fullLogMessage.itemIds = instanceInformation.itemIds; }
	if (item) { fullLogMessage.item = item; }
	if (labels && serviceInformation.labels) {
		fullLogMessage.labels = [...serviceInformation.labels, ...labels];
	} else {
		if (labels) { fullLogMessage.labels = labels; }
		if (serviceInformation.labels) { fullLogMessage.labels = serviceInformation.labels; }
	}

	messageValidator.validateLoggingMessage(fullLogMessage);
	return fullLogMessage;
}

module.exports = {
	defaultServiceInformation,
	defaultInstanceInformation,
	initializeServiceInformation,
	initializeInstanceInformation,
	createLoggingMessage,
};
